#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time: 2023/4/23 20:38
# @Author: 白云苍狗
# @File: 05- dict和set的实现原理.py
# @Software: PyCharm

"""
dict和set的底层实现仍依赖于哈希表
1. dict的实现原理
    1- 键必须时可哈希的。必须正确的实现了__hash__和__eq__方法。
    2- 通过键访问项的速度非常快。
        Python通过计算键的哈希码就可以直接定位键，然后找出索引在哈希表中偏移量，稍微尝试几次就能找到匹配的条目，因此开销不大。
2. set的实现原理
    1- 集合元素必须是可哈希对象。
    2- 成员测试效率非常高。计算元素的哈希码就可以直接定位元素，找出元素的索引偏移量。稍微搜索几次就能找到匹配的元素。
3- 以下是Python字典的基本实现原理：

哈希函数：Python字典依赖于哈希函数来快速查找键值对。哈希函数接受一个值（在这种情况下是键），然后返回一个整数，这个整数被用于确定值在哈希表中的存储位置。

冲突解决：由于不同的键可能会产生相同的哈希值，所以有可能会发生冲突，即两个键被分配到哈希表的同一个位置。为了解决这个问题，Python字典实现了一种叫做“开放寻址”的策略。当发生冲突时，字典会寻找哈希表中的另一个位置来存储值。

动态调整：随着新的键值对被添加到字典中，哈希表可能会变得过满，这可能会导致查找效率的降低。为了避免这个问题，当哈希表达到一定的负载因子（即存储的元素数量和哈希表大小的比例）时，Python字典会创建一个新的、更大的哈希表，并将所有的键值对移动到新的哈希表中。这被称为“重新哈希”。

键和值的存储：在Python字典中，键和值是在连续的内存块中存储的，这被称为数组。每个键值对都被存储在数组的一个元素中，每个元素包含对键的引用、对值的引用以及哈希值。

总的来说，Python字典的实现是一种典型的空间换时间的策略，通过使用更多的内存来存储额外的信息（如哈希值和冲突解决信息），从而实现在常数时间内完成查找、插入和删除操作。
"""
